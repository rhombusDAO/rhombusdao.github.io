{"version":3,"sources":["Components/Hydra.jsx","Components/Spacer.jsx","App.js","serviceWorker.js","index.js"],"names":["HydraCanvas","useEffect","hydra","Hydra","detectAudio","canvas","document","querySelector","makeGlobel","synth","setResolution","setFunction","name","type","inputs","default","glsl","osc","Math","sin","time","modulate","noise","modulatePixelate","gradient","blend","src","o0","luma","scale","brightness","rhombify","out","console","log","id","Spacer","props","divStyle","padding","margin","style","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oQAsDeA,EAnDK,WA6CZ,OA3CCC,qBAAU,WAEP,IAAMC,EAAQ,IAAIC,IAAM,CACpBC,aAAa,EACbC,OAAQC,SAASC,cAAc,aAC/BC,YAAY,IACZC,MAEHP,EAAMQ,cAAc,KAAK,MACzBR,EAAMS,YAAY,CACfC,KAAM,WACNC,KAAM,QACNC,OAAQ,CACN,CACED,KAAM,QACND,KAAM,MACNG,QAAS,QAGbC,KAAK,qJAqBT,OAVZd,EAAMe,KADI,kBAAMC,KAAKC,IAAIjB,EAAMkB,KAAK,IAAIF,KAAKC,IAAIjB,EAAMkB,KAAK,IAAI,EAAI,IACrD,EAAG,GACfC,SAASnB,EAAMoB,MAAM,EAAE,IACvBC,iBAAiBrB,EAAMsB,WAAY,GAAK,GACxCC,MAAMvB,EAAMwB,IAAIxB,EAAMyB,IAAIC,KAAK,IAAKC,MAAM,IAAM,IAChDC,WAAW,IACXC,WACAC,MAGSC,QAAQC,IAAI,WACL,kBAAMD,QAAQC,IAAI,oBACxB,IAGG,4BAAQC,GAAG,cCnCZC,EAZA,SAACC,GAEZ,IAAMC,EAAW,CACbC,QAASF,EAAME,QACfC,OAAQH,EAAMG,QAGlB,OACI,yBAAKC,MAAOH,KCYLI,EAjBH,WACV,OACE,6BACE,yBAAKP,GAAG,oBACN,kBAAC,EAAD,CAAQK,OAAO,qBAAqBD,QAAQ,KAC5C,oDACA,kBAAC,EAAD,CAAQC,OAAO,QAAQD,QAAQ,KAC/B,8CACA,gDACA,kBAAC,EAAD,CAAQC,OAAO,QAAQD,QAAQ,KAC/B,oEACA,2EAEF,kBAACpC,EAAD,QCNcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCbNC,IAASC,OAAO,kBAAC,EAAD,MAAS3C,SAAS4C,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.4735d018.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Hydra from 'hydra-synth';\n\nconst HydraCanvas = () =>  {\n\n         useEffect(() => {\n\n            const hydra = new Hydra({ \n                detectAudio: false,\n                canvas: document.querySelector('#myCanvas'),\n                makeGlobel: false \n             }).synth\n\n             hydra.setResolution(1080,1080)\n             hydra.setFunction({\n                name: 'rhombify',\n                type: 'coord',\n                inputs: [\n                  {\n                    type: 'float',\n                    name: 'amt',\n                    default: '0.5'\n                  }\n                ],\n                glsl:\n              `vec2 xy = _st - vec2(0.5);\n              xy.x += amt*xy.y;\n              xy.y += amt*xy.y;\n              xy += 0.5;\n              return xy;`\n              })\n             //returns an error, but still works\n  // jan 24\n                // jan 24\nlet mod = () => Math.sin(hydra.time/10)*Math.sin(hydra.time/15)*3 + 5\nhydra.osc(mod, 0, 1)\n  .modulate(hydra.noise(6,2 ))\n  .modulatePixelate(hydra.gradient(), 0.3, 2)\n  .blend(hydra.src(hydra.o0).luma(0.4).scale(0.8), 0.2)\n  .brightness(0.2)\n  .rhombify()\n  .out()\n\n\n            console.log('mounted');\n            return () => console.log('unmounting...');\n          }, [])  // <-- add this empty array here\n\n        return (\n                <canvas id=\"myCanvas\"></canvas>\n        )\n    \n}\n\nexport default HydraCanvas;","import React from 'react';\n\nconst Spacer = (props) => {\n\n    const divStyle = {\n        padding: props.padding,\n        margin: props.margin\n      };\n\n    return (\n        <div style={divStyle}></div>\n    )\n}\n\nexport default Spacer;","import React from \"react\";\nimport DisplayAllPosts from './Components/DisplayAllPosts'\nimport HydraCanvas from \"./Components/Hydra\";\nimport Spacer from './Components/Spacer';\n\nconst App = ( ) => {\n  return (\n    <div>\n      <div id=\"poster-container\">\n        <Spacer margin=\"100px 0px 20px 0px\" padding=\"\"/>\n        <h3>The Rhombus Presents</h3>\n        <Spacer margin=\"150px\" padding=\"\"/>\n        <h1>Allie Westberg</h1>\n        <h1>Tiwonku (DJ Set)</h1>\n        <Spacer margin=\"150px\" padding=\"\"/>\n        <h3>Saturday, February 5th 2022, 6pm UTC</h3>\n        <h3>play.decentraland.org, coordinates (34,22)</h3>\n      </div>\n      <HydraCanvas/>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './style.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}